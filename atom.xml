<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>学渣的世界你不懂</title>
  
  <subtitle>5minutesTutorial</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tmp.dxz.plus/"/>
  <updated>2019-12-07T13:20:20.677Z</updated>
  <id>http://tmp.dxz.plus/</id>
  
  <author>
    <name>金牌大学渣</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test</title>
    <link href="http://tmp.dxz.plus/2019/12/07/test/"/>
    <id>http://tmp.dxz.plus/2019/12/07/test/</id>
    <published>2019-12-07T12:29:50.000Z</published>
    <updated>2019-12-07T13:20:20.677Z</updated>
    
    <content type="html"><![CDATA[<p>参考 <a href="https://ssu.tw/index.php/archives/31/" target="_blank" rel="noopener"><strong>使用docker快速部署shadowsocks-libev+v2ray-plugin</strong></a> 和 <a href="https://www.youtube.com/watch?v=8syWEJq8dH4&t=120s" target="_blank" rel="noopener"><strong>V2Ray拒绝减速CDN，自选香港日本CDN节点</strong></a>两位的方法, 结合<a href="https://teddysun.com/569.html" target="_blank" rel="noopener">秋水</a>提供的 <a href="https://hub.docker.com/r/teddysun/shadowsocks-libev/" target="_blank" rel="noopener">ss-libev</a> 和 <a href="https://hub.docker.com/r/teddysun/v2ray" target="_blank" rel="noopener">v2ray</a> 两个 dockers 用起来非常爽，全走CDN，不再阻断，速度尚可。总结一下</p><a id="more"></a><h2 id="废话，可以不看"><a href="#废话，可以不看" class="headerlink" title="废话，可以不看"></a>废话，可以不看</h2><p>垃圾小鸡如何拯救（剁手党如何回本）？雪嫩的小白，如何有工程师的感觉？ 经济不景气如何提振？看这里就对了<br>折腾了两天，基本实现想要的效果。docker 配置 ss+v2ray+emby ws+http+tls+CDN。为了掩饰，我在aws的lightsail开了一个爱尔兰节点的小鸡，512内存，基本匹配市面垃圾小鸡。<br>Docker的有点就是一旦搭建好以后，可以随便折腾，配置文件保存到本地，换机分分钟<br>caddy 的优势是及其轻量，同时可以自动申请并续期证书，方便到家<br>但是现在有一个坑卡住了，就是caddy自动申请脚本，还是要到dns去添加txt记录，而教程里面是要到阿里云的dns去添加txt。所以不能自动。以本白现在的水平，搞不定了，期待高手出现。。。<br>除了这篇手动教程，还有很多选择，比如<a href="https://blog.sprov.xyz/2019/08/03/v2-ui/" target="_blank" rel="noopener"><strong>这篇面板</strong></a>教程，也非常方便。还有<a href="https://github.com/wulabing/V2Ray_ws-tls_bash_onekey" target="_blank" rel="noopener"><strong>这篇</strong></a>，是我之前一直在用的一键脚本。在多数新装的vps上面都可以成功。本教程的目的就是一个：折腾<br>如果你对自己折腾出来的东西感到开心，不怕麻烦，那就继续<br>当然，自己折腾，把思路整理清楚了，基本上什么环境都可以适用，并且配置文件完全自己驾驭，想改什么都可以。不像用脚本，出了问题，出了换系统，换脚本之外，别无他法，相当无助<br>当然，教程还需要完善，也有很多错误，需要慢慢改<br>caddy配置文件里面有3个网站v2，ss，emby<br>按需使用，增减设置文件，开停相应docker即可<br>折腾开心哈<br><strong>注意，教程里面的 邮箱信息 API 信息以及密码 UUID等 需要你自己更改，不要和教程的一毛一样</strong></p><h2 id="视频记录"><a href="#视频记录" class="headerlink" title="视频记录"></a>视频记录</h2><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><p>no url specified, no dplayer _(:3」∠)_</p> <p><embed src="http://share.dxz.plus/BlogContent/My%20Movie-dockerV2raySsCDN.mp4" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" allowFullScreen="true" mode="transparent" type="application/x-shockwave-flash"></embed></p><p>[dplayer url=”<a href="http://share.dxz.plus/BlogContent/My%20Movie-dockerV2raySsCDN.mp4&quot;" target="_blank" rel="noopener">http://share.dxz.plus/BlogContent/My%20Movie-dockerV2raySsCDN.mp4&quot;</a> pic=”<a href="http://share.dxz.plus/BlogContent/My%20Movie-dockerV2raySsCDN.png&quot;/]" target="_blank" rel="noopener">http://share.dxz.plus/BlogContent/My%20Movie-dockerV2raySsCDN.png&quot;/]</a><br>干什么都有第一次，这个视频够简陋的了，打码就废了好长时间。机器也不行，小白难，穷小白难上加难</p><h2 id="搞定CDN"><a href="#搞定CDN" class="headerlink" title="搞定CDN"></a>搞定CDN</h2><p>lightsail的系统太操蛋，先dd个debian 9<br>用脚本</p><pre><code>apt updateapt install curl screen zip nload nano -yapt-get install -y xz-utils openssl gawk filebash &lt;(wget --no-check-certificate -qO- &apos;https://moeclub.org/attachment/LinuxShell/InstallNET.sh&apos;) -d 9 -v 64 -a -firmware</code></pre><p>等几分钟就可以root登陆了 密码是 MoeClub.org</p><p>直接上CDN，看<a href="https://www.youtube.com/watch?v=8syWEJq8dH4&t=120s" target="_blank" rel="noopener">这个</a>视频，到<a href="https://cdn.moeelf.com/" target="_blank" rel="noopener">这个网站</a>添加域名。主域名，二级域名都行.<br>这里添加3个二级 分别是 sslbv v2ray 和 emby<br><img src="http://share.dxz.plus/BlogContent/Screen%20Shot%202019-11-29%20at%2012.28.39%20AM-ARecord.png" alt="ARecord"><br><img src="http://share.dxz.plus/BlogContent/Screen%20Shot%202019-11-29%20at%2012.29.18%20AM-Cname.png" alt="Cname"><br>记下CNAME，然后去dns服务商出添加cname，比如阿里云免费提供的dns解析<br>如下添加3个<br><img src="http://share.dxz.plus/BlogContent/Screen%20Shot%202019-11-29%20at%2012.31.57%20AM-DNS-Cname.png" alt="DNS-Cname"><br><img src="http://share.dxz.plus/BlogContent/Screen%20Shot%202019-11-29%20at%2012.34.02%20AM-DNS-Cname1.png" alt="DNS-Cname1"><br><strong>安装一些必备的东西</strong></p><pre><code>apt updateapt install curl screen zip nload nano sshfs -y</code></pre><p>安装embyserver的部分参见<a href="http://dxz.plus/index.php/2019/11/03/10.html" target="_blank" rel="noopener"><strong>之前</strong></a>的帖子，注意建立本地用户就行了，不需要连接账户登陆。因为我不知掉的原因，用emby账户无法走CDN加速。</p><h2 id="安装caddy并申请证书"><a href="#安装caddy并申请证书" class="headerlink" title="安装caddy并申请证书"></a>安装caddy并申请证书</h2><p>证书用caddy申请，参照<a href="https://ssu.tw/index.php/archives/8/" target="_blank" rel="noopener"><strong>这篇</strong></a>帖子，看到搞定cloudflare的 API KEY 即停。后面的申请不用acme.sh脚本。<br>在ssh里面执行 export的环境设置</p><pre><code>export CLOUDFLARE_EMAIL=&quot;youremail@gmail.com&quot;export CLOUDFLARE_API_KEY=&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</code></pre><p><strong>安装caddy</strong></p><pre><code>curl https://getcaddy.com | bash -s personal tls.dns.cloudflare</code></pre><p><strong>caddy申请证书</strong><br>建目录，放文件</p><pre><code>mkdir /root/caddycd /root/caddynano /root/caddy/Caddyfile</code></pre><p>把下面内容添加到Caddyfile</p><pre><code>sslbv.madelonely.ml {  gzip  tls {      dns cloudflare}  log /root/caddy/caddy.s.log  proxy / https://baidu.com  proxy /dxz 127.0.0.1:9999 {    websocket    header_upstream -Origin  }}v2ray.madelonely.ml {  gzip  tls {      dns cloudflare}  log /root/caddy/caddy.v.log  proxy /dxz 127.0.0.1:8888 {    websocket    header_upstream -Origin  }}emby.madelonely.ml {  gzip  tls {      dns cloudflare}  log /root/caddy/caddy.e.log  proxy / 127.0.0.1:8096 {   header_upstream -Origin  websocket}}</code></pre><p>然后执行</p><pre><code>caddy -conf /root/caddy/Caddyfile</code></pre><p>这时候回提示输入邮箱，随便写，回车之后开始验证dns，不要紧，继续操作。<br><img src="http://share.dxz.plus/BlogContent/Screen%20Shot%202019-11-29%20at%201.03.09%20AM-VerifyDNS.png" alt="VerifyDNS"><br>回车后到之前 CF Parterner 网页，刷新一下，找到如下的新记录<br><img src="http://share.dxz.plus/BlogContent/Screen%20Shot%202019-11-29%20at%201.03.51%20AM-txt.png" alt="txt"><br>将两行文字复制到dns解析的地方，添加txt记录 完成验证<br><img src="http://share.dxz.plus/BlogContent/Screen%20Shot%202019-11-29%20at%201.04.03%20AM-record.png" alt="Record"><br>ssh这边已经验证完毕，并正常运行caddy服务<br><img src="http://share.dxz.plus/BlogContent/Screen%20Shot%202019-11-29%20at%201.04.38%20AM-Verified.png" alt="Verified"><br>接着按照视频教程走可以指定CDN节点，最后效果是这样。当然，也可以全部搞定再慢慢调整<br><img src="http://share.dxz.plus/BlogContent/Screen%20Shot%202019-11-29%20at%202.00.41%20PM-AssigningCDN.png" alt="AssigningCDN"><br>把申请好的sslbv的证书复制到/root/caddy/ssplugin/</p><pre><code>mkdir /root/caddy/ssplugin/cp /root/.caddy/acme/acme-v02.api.letsencrypt.org/sites/sslbv.madelonely.ml/sslbv.madelonely.ml.crt /root/caddy/ssplugin/plugin.crtcp /root/.caddy/acme/acme-v02.api.letsencrypt.org/sites/sslbv.madelonely.ml/sslbv.madelonely.ml.key /root/caddy/ssplugin/plugin.key</code></pre><p>至此，tls搞定。</p><h2 id="挂载给emby读取00盘"><a href="#挂载给emby读取00盘" class="headerlink" title="挂载给emby读取00盘"></a>挂载给emby读取00盘</h2><pre><code>curl https://rclone.org/install.sh | bashmkdir /root/rclone/mkdir /root/rclone/ldfdsa00</code></pre><p>先执行<code>rclone config</code> 然后q退出</p><pre><code>nano /root/.config/rclone/rclone.conf</code></pre><p>把正常使用的rclone.conf文件内容粘贴到rclone.conf里面，不用重新配置rclone了<br>添加到开机启动</p><pre><code>nano /etc/crontab</code></pre><p>最下面加入</p><pre><code>@reboot root rclone mount ldfdsa00: /root/rclone/ldfdsa00  --buffer-size 1G --vfs-read-chunk-size 256M --vfs-read-chunk-size-limit 2G  --allow-non-empty --allow-other   --dir-cache-time 12h  &gt;/dev/null 2&gt;&amp;1 &amp;</code></pre><p>也可以把证书更新后copy给ss docker用的加到crontab里面，真正实现证书全自动续期，不用再管了(注意一下，如果按照本片教程指定CDN是无法全自动，如果直接cf指定节点，也就是有cf而不是像我由阿里云解析dns，那是可以做到全自动的)</p><pre><code>0 0 0 * * root  cp /root/.caddy/acme/acme-v02.api.letsencrypt.org/sites/sslbv.madelonely.ml/sslbv.madelonely.ml.crt /root/caddy/ssplugin/plugin.crt0 0 0 * * root cp /root/.caddy/acme/acme-v02.api.letsencrypt.org/sites/sslbv.madelonely.ml/sslbv.madelonely.ml.key /root/caddy/ssplugin/plugin.key</code></pre><p>为了避免错误，先增加虚拟内存，2-3g</p><pre><code>wget https://www.moerats.com/usr/shell/swap.sh &amp;&amp; bash swap.sh</code></pre><p>按1再写2000-3000<br><strong>挂载</strong><br>可先把后台参数 <code>&gt;/dev/null 2&gt;&amp;1 &amp;</code> 去掉 加上 <code>-vvv</code> 参数 等没问题在加后台参数 <code>&gt;/dev/null 2&gt;&amp;1 &amp;</code></p><pre><code>rclone mount ldfdsa00: /root/rclone/ldfdsa00  --buffer-size 1G --vfs-read-chunk-size 256M --vfs-read-chunk-size-limit 2G  --allow-non-empty --allow-other   --dir-cache-time 12h  &gt;/dev/null 2&gt;&amp;1 &amp;</code></pre><h2 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h2><p><strong>v2ray</strong><br>在 /root/caddy/v2ray下新建文件config.json</p><pre><code>mkdir /root/caddy/v2raynano /root/caddy/v2ray/config.json</code></pre><p>将如下内容填入config.json文件（相应位置自己改）</p><pre><code>{        &quot;log&quot; : {                &quot;access&quot;: &quot;/var/log/v2ray/access.log&quot;,                &quot;error&quot;: &quot;/var/log/v2ray/error.log&quot;,                &quot;loglevel&quot;: &quot;warning&quot;        },        &quot;inbounds&quot;:[{                &quot;port&quot;: 8888,                &quot;protocol&quot;: &quot;vmess&quot;,                &quot;settings&quot;: {                        &quot;clients&quot;: [                                {                                        &quot;id&quot;: &quot;ae2a6c5e-11d7-11ea-8d71-362b9e155667&quot;,                                         &quot;level&quot;: 1,                                        &quot;alterId&quot;: 88                                }                        ]                },                &quot;streamSettings&quot;: {                        &quot;network&quot;: &quot;ws&quot;,                        &quot;wsSettings&quot;: {                                &quot;path&quot;: &quot;/dxz&quot;                         }                }        }],        &quot;outbounds&quot;: [{                &quot;protocol&quot;: &quot;freedom&quot;,                &quot;settings&quot;: {}        }]}  </code></pre><p>这个配置文件是否可用，自己可以到<strong><a href="https://tools.sprov.xyz/v2ray/" target="_blank" rel="noopener">这个</a></strong>网站自查。<br><strong><a href="https://www.uuidgenerator.net/" target="_blank" rel="noopener">这个网站</a></strong>可以生成自己的uuid<br><strong>ss-lbev</strong><br>创建ss-libev配置文件</p><pre><code>mkdir /root/caddy/sspluginnano /root/caddy/ssplugin/config.json  </code></pre><p>写入如下内容</p><pre><code>{&quot;server&quot;:&quot;127.0.0.1&quot;,&quot;server_port&quot;:9999,&quot;method&quot;:&quot;aes-128-gcm&quot;,&quot;timeout&quot;:300,&quot;password&quot;:&quot;dxz&quot;, &quot;fast_open&quot;:false,&quot;nameserver&quot;:&quot;8.8.8.8&quot;,&quot;mode&quot;:&quot;tcp_and_udp&quot;,&quot;plugin&quot;:&quot;v2ray-plugin&quot;,&quot;plugin_opts&quot;:&quot;server;path=/dxz&quot; }</code></pre><p><strong>emby</strong><br>emby不需要配置文件，一行命令搞定</p><p><strong>安装docker</strong><br>脚本</p><pre><code>curl -fsSL https://get.docker.com -o get-docker.sh    sh get-docker.sh</code></pre><h2 id="pull-docker镜像"><a href="#pull-docker镜像" class="headerlink" title="pull docker镜像"></a>pull docker镜像</h2><pre><code>docker run -d -p 8888:8888 --name v2 --restart=always -v /root/caddy/v2ray:/etc/v2ray teddysun/v2raydocker run -d --name ss --restart always --net host -v /root/caddy/ssplugin:/etc/shadowsocks-libev teddysun/shadowsocks-libevdocker run --name=emby -d -v /root/emby/config:/config   -v /root/rclone:/clone     --net host  -e UID=1000  -e GID=100  -e GIDLIST=100 --restart unless-stopped  emby/embyserver:latest</code></pre><p>再次添加 api</p><pre><code>export CLOUDFLARE_EMAIL=&quot;youremail@gmail.com&quot;export CLOUDFLARE_API_KEY=&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</code></pre><h2 id="执行caddy，启动3个docker的cdn连接"><a href="#执行caddy，启动3个docker的cdn连接" class="headerlink" title="执行caddy，启动3个docker的cdn连接"></a>执行caddy，启动3个docker的cdn连接</h2><pre><code>caddy -conf /root/caddy/Caddyfile</code></pre><p>这时候可以看提示，有错误就看看哪儿的问题，解决一下。没有问题就下一步</p><h2 id="开机启动脚本"><a href="#开机启动脚本" class="headerlink" title="开机启动脚本"></a>开机启动脚本</h2><p>新建启动文件</p><pre><code>nano /root/caddy/caddystart</code></pre><p>写入下列内容</p><pre><code>#!/bin/bashCLOUDFLARE_EMAIL=&quot;youremail@gmail.com&quot; \CLOUDFLARE_API_KEY=&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxx&quot; \caddy -conf /root/caddy/Caddyfile &gt;/dev/null 2&gt;&amp;1 &amp;</code></pre><p>利用crontab自启动</p><pre><code>nano /etc/crontab</code></pre><p>最下一行写入</p><pre><code>@reboot root bash /root/caddy/caddystart</code></pre><p>这样每次重启就自动运行三个网站，并自动开启CDN。<br>更新证书还是没有解决，因为指定CDN的原因，必须手动复制txt到dns解析服务。<br>但是如果不指定DNS，那么这个脚本就真正做到完全自动化了<br>一点点遗憾</p><h2 id="VOILA"><a href="#VOILA" class="headerlink" title="VOILA"></a>VOILA</h2><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ol><li>我这里开cf 白天看00盘里的4k电影很轻松，remux 4k 有难度。可能是CDN的IP选的不好，以后慢慢找</li><li>晚上速度待测，昨天速度只有10Mb/s，比较差，符合垃圾小鸡的水平，但是比直连要快</li><li>晚上高峰结果，40m码率无压力<br>[dplayer url=”<a href="http://share.dxz.plus/BlogContent/IMG_8362-IE-emby-test-11292230.MOV&quot;" target="_blank" rel="noopener">http://share.dxz.plus/BlogContent/IMG_8362-IE-emby-test-11292230.MOV&quot;</a> pic=”<a href="http://share.dxz.plus/BlogContent/Screen%20Shot%202019-11-29%20at%2011.17.20%20PM-emby-test-11292230.png&quot;/]" target="_blank" rel="noopener">http://share.dxz.plus/BlogContent/Screen%20Shot%202019-11-29%20at%2011.17.20%20PM-emby-test-11292230.png&quot;/]</a></li><li>爱尔兰小鸡直连和CDN对比<br><img src="http://share.dxz.plus/BlogContent/Screen%20Shot%202019-11-30%20at%2011.30.13%20PM-Compare.png" alt="compare"></li><li>如果都搭建好了，发现不走CDN，试试去cloudflare改下SLL/TLS设置<br><img src="http://share.dxz.plus/BlogContent/Screen%20Shot%202019-11-30%20at%2010.17.33%20AM-SSL-TLS.png" alt="SSL/TLS"></li><li>docker的用途还有很多，比如折腾久了，想记录一下，写个记录之类的，比如这个博客就是用docker搞定等。typecho wordpress hexo 都可以，简单几步，5分钟，以后回出教程。</li><li><strong>添加特洛伊 trojan</strong></li></ol><p><strong>申请证书</strong><br>只需在 /root/caddy/Caddyfile 种添加一个记录，就可以申请 证书</p><pre><code>trojan.trumptheidiot.tk {  gzip  tls {      dns cloudflare}  log /root/caddy/caddy.s.log  proxy / https://baidu.com  proxy /dxz 127.0.0.1:9999 {    websocket    header_upstream -Origin  }}</code></pre><p>运行 <code>caddy -conf /root/caddy/Caddyfile</code> 就可以自动开始申请证书，添加TXT记录方法同上</p><p>证书申请完后，记得先删 /root/caddy/Caddyfile 文件刚刚添加的用于申请证书的内容，否则就套了CDN，trojan的效果大打折扣。</p><p><strong>新建目录，写配置</strong></p><pre><code>mkdir /root/trojannano /root/trojan/config.json</code></pre><p>密码dxz，改成你想要的</p><pre><code>{    &quot;run_type&quot;: &quot;server&quot;,    &quot;local_addr&quot;: &quot;0.0.0.0&quot;,    &quot;local_port&quot;: 443,    &quot;remote_addr&quot;: &quot;127.0.0.1&quot;,    &quot;remote_port&quot;: 80,    &quot;password&quot;: [        &quot;dxz&quot;    ],    &quot;log_level&quot;: 1,    &quot;ssl&quot;: {        &quot;cert&quot;: &quot;/config/certificate.crt&quot;,        &quot;key&quot;: &quot;/config/private.key&quot;,        &quot;key_password&quot;: &quot;&quot;,        &quot;cipher&quot;: &quot;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256&quot;,        &quot;prefer_server_cipher&quot;: true,        &quot;alpn&quot;: [            &quot;http/1.1&quot;        ],        &quot;reuse_session&quot;: true,        &quot;session_ticket&quot;: false,        &quot;session_timeout&quot;: 600,        &quot;plain_http_response&quot;: &quot;&quot;,        &quot;curves&quot;: &quot;&quot;,        &quot;dhparam&quot;: &quot;&quot;    },    &quot;tcp&quot;: {        &quot;prefer_ipv4&quot;: false,        &quot;no_delay&quot;: true,        &quot;keep_alive&quot;: true,        &quot;fast_open&quot;: false,        &quot;fast_open_qlen&quot;: 20    },    &quot;mysql&quot;: {        &quot;enabled&quot;: false,        &quot;server_addr&quot;: &quot;127.0.0.1&quot;,        &quot;server_port&quot;: 3306,        &quot;database&quot;: &quot;trojan&quot;,        &quot;username&quot;: &quot;trojan&quot;,        &quot;password&quot;: &quot;&quot;    }}</code></pre><p>启动trojan docker，端口由于我在原有基础上添加，所以不能用443，改成32400，假装是plex服务器。你可以改成443，更真一些。<br><strong>启动trojan docker</strong></p><pre><code>docker run -dt --name trojan -v /root/trojan:/config -p 32400:443 trojangfw/trojan</code></pre><p><strong>看启动日志，排错</strong></p><pre><code>docker logs -f trojan</code></pre><p><strong>客户端</strong><br>可以安装OpenWRT，一些固件已经自带trojan了<br>win mac 可以参考<a href="https://la4ji.blogspot.com/2019/01/trojandebianxx.html" target="_blank" rel="noopener">这篇文章</a><br>文章写的比较早，ios没提到小火箭，亲测小火箭可用，只需要添加相应（子）域名和密码即可。<br>注意的是，用cloudflare DNS 解析的时候，一定要把 云朵图标熄灭<br><img src="http://share.dxz.plus/BlogContent/Screen%20Shot%202019-12-06%20at%209.26.49%20AM-trojonCDNoff.png" alt="CDNoff"><br>有疑问或者有能力帮我填坑请（via频道主 <a href="https://t.me/gdriveHost" target="_blank" rel="noopener">https://t.me/gdriveHost</a> ）加群 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考 &lt;a href=&quot;https://ssu.tw/index.php/archives/31/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;使用docker快速部署shadowsocks-libev+v2ray-plugin&lt;/strong&gt;&lt;/a&gt; 和 &lt;a href=&quot;https://www.youtube.com/watch?v=8syWEJq8dH4&amp;t=120s&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;V2Ray拒绝减速CDN，自选香港日本CDN节点&lt;/strong&gt;&lt;/a&gt;两位的方法, 结合&lt;a href=&quot;https://teddysun.com/569.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;秋水&lt;/a&gt;提供的 &lt;a href=&quot;https://hub.docker.com/r/teddysun/shadowsocks-libev/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ss-libev&lt;/a&gt; 和 &lt;a href=&quot;https://hub.docker.com/r/teddysun/v2ray&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;v2ray&lt;/a&gt; 两个 dockers 用起来非常爽，全走CDN，不再阻断，速度尚可。总结一下&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://tmp.dxz.plus/2019/12/07/hello-world/"/>
    <id>http://tmp.dxz.plus/2019/12/07/hello-world/</id>
    <published>2019-12-07T09:48:15.943Z</published>
    <updated>2019-12-07T09:48:15.943Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
